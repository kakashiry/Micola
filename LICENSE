import sqlite3
import tkinter as tk
from tkinter import messagebox, Toplevel, Label, Entry, Button, Frame, Scrollbar, Canvas

# бдшки
db_path = "partners_demo.db"
products_db = "partner_products.db"

# создание основной бд
def setup_db():
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS partners_demo (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        Тип_партнера TEXT,
        Наименование_партнера TEXT,
        Директор TEXT,
        Электронная_почта_партнера TEXT,
        Телефон_партнера TEXT,
        Юридический_адрес_партнера TEXT,
        ИНН TEXT,
        Рейтинг TEXT
    )
    """)
    conn.commit()
    conn.close()

# внос данных в основную бд
def populate_demo_data():
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM partners_demo")
    if cursor.fetchone()[0] == 0:
        data = [
            ('Тип партнера', 'Наименование партнера', 'Директор', 'Электронная почта партнера', 'Телефон партнера', 'Юридический адрес партнера', 'ИНН', 'Рейтинг'),
            ('ЗАО', 'База Строитель', 'Иванова Александра Ивановна', 'aleksandraivanova@ml.ru', '493 123 45 67', '652050, Кемеровская область, город Юрга, ул. Лесная, 15', '2222455179', '7'),
            ('ООО', 'Паркет 29', 'Петров Василий Петрович', 'vppetrov@vl.ru', '987 123 56 78', '164500, Архангельская область, город Северодвинск, ул. Строителей, 18', '3333888520', '7'),
            ('ПАО', 'Стройсервис', 'Соловьев Андрей Николаевич', 'ansolovev@st.ru', '812 223 32 00', '188910, Ленинградская область, город Приморск, ул. Парковая, 21', '4440391035', '7'),
            ('ОАО', 'Ремонт и отделка', 'Воробьева Екатерина Валерьевна', 'ekaterina.vorobeva@ml.ru', '444 222 33 11', '143960, Московская область, город Реутов, ул. Свободы, 51', '1111520857', '5'),
            ('ЗАО', 'МонтажПро', 'Степанов Степан Сергеевич', 'stepanov@stepan.ru', '912 888 33 33', '309500, Белгородская область, город Старый Оскол, ул. Рабочая, 122', '5552431140', '10')
        ]
        cursor.executemany("""
        INSERT INTO partners_demo 
            (Тип_партнера, Наименование_партнера, Директор, Электронная_почта_партнера, Телефон_партнера, Юридический_адрес_партнера, ИНН, Рейтинг)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, data)
        conn.commit()
    conn.close()

# создание вторичной бд и внос данных
def setup_products_db():
    conn = sqlite3.connect(products_db)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS Partner_products_import (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        "Наименование партнера" TEXT,
        "Количество продукции" TEXT
    )
    """)
    conn.commit()
    cursor.execute("SELECT COUNT(*) FROM Partner_products_import")
    if cursor.fetchone()[0] == 0:
        sample_data = [
            ('База Строитель', '15500'),
            ('База Строитель', '12350'),
            ('База Строитель', '37400'),
            ('Паркет 29', '35000'),
            ('Паркет 29', '1250'),
            ('Паркет 29', '1000'),
            ('Паркет 29', '7550'),
            ('Стройсервис', '7250'),
            ('Стройсервис', '2500'),
            ('Ремонт и отделка', '59050'),
            ('Ремонт и отделка', '37200'),
            ('Ремонт и отделка', '4500'),
            ('МонтажПро', '50000'),
            ('МонтажПро', '670000'),
            ('МонтажПро', '35000'),
            ('МонтажПро', '25000'),
        ]
        for partner, quantity in sample_data:
            cursor.execute(
                "INSERT INTO Partner_products_import (\"Наименование партнера\", \"Количество продукции\") VALUES (?, ?)",
                (partner, quantity)
            )
        conn.commit()
    conn.close()

# обновление бд
def refresh_db():
    for widget in cards_frame.winfo_children():
        widget.destroy()
        
    # бд основное
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT ID, Тип_партнера, Наименование_партнера, Директор, Телефон_партнера, Рейтинг FROM partners_demo")
    rows = cursor.fetchall()
    conn.close()
    
    for row in rows:
        partner_id = row[0]
        partner_type = row[1]
        partner_name = row[2]
        director = row[3]
        phone = row[4]
        rating = row[5]
        
        # бд продуктов
        conn2 = sqlite3.connect(products_db)
        cursor2 = conn2.cursor()
        cursor2.execute(
            "SELECT SUM(CAST(\"Количество продукции\" AS INTEGER)) FROM Partner_products_import WHERE \"Наименование партнера\" = ?",
            (partner_name,)
        )
        total_result = cursor2.fetchone()[0]
        conn2.close()
        total = total_result if total_result is not None else 0
        
        # скидка расчет
        if total < 10000:
            discount = 0
        elif total < 50000:
            discount = 5
        elif total < 300000:
            discount = 10
        else:
            discount = 15
        
        card = Frame(cards_frame, bd=2, relief="ridge", padx=10, pady=5)
        card.pack(fill="x", padx=5, pady=5)

        # данные на вывод в карточке
        top_row = Frame(card)
        top_row.pack(fill="x")
        Label(top_row, text=f"{partner_type} | {partner_name}", font=("Arial", 12, "bold")).pack(side="left", anchor="w")
        Label(top_row, text=f"{discount}%", font=("Arial", 12, "bold"), fg="green").pack(side="right", anchor="e")
        Label(card, text=f"Директор: {director}").pack(anchor="w")
        Label(card, text=f"Телефон: {phone}").pack(anchor="w")
        Label(card, text=f"Рейтинг: {rating}").pack(anchor="w")

        btn_frame = Frame(card)
        btn_frame.pack(fill="x", pady=(5, 0))

        # кнопки редактирования и удаления
        Button(btn_frame, text="Редактировать", command=lambda rid=partner_id: open_edit_window(rid)).pack(side="left", padx=5)
        Button(btn_frame, text="Удалить", command=lambda rid=partner_id: delete_entry(rid)).pack(side="left")

# проверки
def validate_phone(phone):
    allowed = "0123456789+-() "
    countdigit = 0
    for char in phone:
        if char not in allowed:
            return False
        if char.isdigit():
            countdigit += 1
    return countdigit >= 7    
def validate_email(email):
    return "@" in email and "." in email
def validate_inn(inn):
    return inn.isdigit() and len(inn) in (10, 12)
def validate_rating(rating):
    try:
        float(rating) 
        return True
    except ValueError:
        return False

# функция добавления
def open_add_window():
    def save_new_entry():
        phone = entry_phone.get()
        email = entry_email.get()
        inn = entry_inn.get()
        rating = entry_rating.get()
        
        if not validate_phone(phone):
            messagebox.showerror("Ошибка", "Телефон должен содержать только цифры!")
            return
        if not validate_email(email):
            messagebox.showerror("Ошибка", "Некорректный email! Должен содержать @ и точку.")
            return
        if not validate_inn(inn):
            messagebox.showerror("Ошибка", "ИНН должен содержать 10 или 12 цифр!")
            return
        if not validate_rating(rating):
            messagebox.showerror("Ошибка", "Рейтинг должен быть числом!")
            return

        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO partners_demo (Тип_партнера, Наименование_партнера, Директор, Электронная_почта_партнера, Телефон_партнера, Юридический_адрес_партнера, ИНН, Рейтинг) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            (entry_type.get(), entry_name.get(), entry_director.get(), entry_email.get(), entry_phone.get(), entry_address.get(), entry_inn.get(), entry_rating.get())
        )
        conn.commit()
        conn.close()
        refresh_db()

        addsuccess_window = Toplevel(root)
        addsuccess_window.title("Успешное добавление")
        addsuccess_window.geometry("300x100")
        Label(addsuccess_window, text="Успешно добавлено!", fg="green", font=("Arial", 14)).pack(pady=20)
        addsuccess_window.after(2000, addsuccess_window.destroy)
        add_window.after(1000, add_window.destroy)
        
    add_window = Toplevel(root)
    add_window.title("Добавить запись")
    
    fields = ["Тип партнера", "Наименование", "Директор", "Email", "Телефон", "Адрес", "ИНН", "Рейтинг"]
    entries = []
    for field in fields:
        Label(add_window, text=field).pack(pady=(5, 0))
        entry = Entry(add_window, width=40)
        entry.pack(pady=(0, 5))
        entries.append(entry)
    
    entry_type, entry_name, entry_director, entry_email, entry_phone, entry_address, entry_inn, entry_rating = entries
    
    Button(add_window, text="Сохранить", command=save_new_entry, font=("Arial", 11), padx=10, pady=5).pack(pady=10)

# функция редактирования
def open_edit_window(record_id):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM partners_demo WHERE ID = ?", (record_id,))
    record = cursor.fetchone()
    conn.close()
    
    def save_edited_entry():
        phone = entry_phone.get()
        email = entry_email.get()
        inn = entry_inn.get()
        rating = entry_rating.get()
        
        if not validate_phone(phone):
            messagebox.showerror("Ошибка", "Телефон должен содержать только цифры!")
            return
        if not validate_email(email):
            messagebox.showerror("Ошибка", "Некорректный email! Должен содержать @ и точку.")
            return
        if not validate_inn(inn):
            messagebox.showerror("Ошибка", "ИНН должен содержать 10 или 12 цифр!")
            return
        if not validate_rating(rating):
            messagebox.showerror("Ошибка", "Рейтинг должен быть числом!")
            return

        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE partners_demo SET Тип_партнера=?, Наименование_партнера=?, Директор=?, Электронная_почта_партнера=?, Телефон_партнера=?, Юридический_адрес_партнера=?, ИНН=?, Рейтинг=? WHERE ID=?",
            (entry_type.get(), entry_name.get(), entry_director.get(), entry_email.get(), entry_phone.get(), entry_address.get(), entry_inn.get(), entry_rating.get(), record_id)
        )
        conn.commit()
        conn.close()
        refresh_db()

        success_window = Toplevel(root)
        success_window.title("Успешно")
        success_window.geometry("300x100")
        Label(success_window, text="Успешно изменено!", fg="green", font=("Arial", 14)).pack(pady=20)
        success_window.after(2000, success_window.destroy)
        edit_window.after(1000, edit_window.destroy)
        
    edit_window = Toplevel(root)
    edit_window.title("Редактировать запись")
    
    fields = ["Тип партнера", "Наименование", "Директор", "Email", "Телефон", "Адрес", "ИНН", "Рейтинг"]
    entries = []
    for i, field in enumerate(fields):
        Label(edit_window, text=field).pack(pady=(5, 0))
        entry = Entry(edit_window, width=40)
        entry.insert(0, record[i+1])
        entry.pack(pady=(0, 5))
        entries.append(entry)
    
    entry_type, entry_name, entry_director, entry_email, entry_phone, entry_address, entry_inn, entry_rating = entries
    
    Button(edit_window, text="Сохранить", command=save_edited_entry, font=("Arial", 11), padx=10, pady=5).pack(pady=10)

# функция удаления
def delete_entry(record_id):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM partners_demo WHERE ID = ?", (record_id,))
    conn.commit()
    conn.close()
    refresh_db()

    delete_window = Toplevel(root)
    delete_window.title("Успешное добавление")
    delete_window.geometry("300x100")
    Label(delete_window, text="Успешно удалено!", fg="red", font=("Arial", 14)).pack(pady=20)
    delete_window.after(2000, delete_window.destroy)

# основное
root = tk.Tk()
root.title("Мастер пол")
setup_db()
setup_products_db()
populate_demo_data()

# иконка
icon_path = "Мастер пол.ico"
root.iconbitmap(icon_path)


# хедер для кнопки "добавить запись"
header_frame = Frame(root)
header_frame.pack(fill="x", padx=10, pady=10)
add_btn = Button(header_frame, text="Добавить запись", command=open_add_window, font=("Arial", 12, "bold"), padx=20, pady=10)
add_btn.pack(side="top")

# канвас с прокруткой для карточек записей
canvas = Canvas(root)
scrollbar = Scrollbar(root, orient="vertical", command=canvas.yview)
cards_frame = Frame(canvas)
cards_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
canvas.create_window((0, 0), window=cards_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)
canvas.pack(side="left", fill="both", expand=True, padx=10, pady=(0, 10))
scrollbar.pack(side="right", fill="y", pady=(0, 10))

refresh_db()
root.mainloop()
